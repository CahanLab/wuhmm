for line in clustsfile:
    l=line.split("\t");
    clusts.append(int(l[2]));
    positions.append(float(l[0]));
    signals.append(float(l[1]));

n_s2 = ghmm.EmissionSequence(i_alph, clusts)

old = model.loglikelihood(n_s2)
for k in range(iterations):
    model.baumWelch(n_s2, 1, 0.01)
    n = model.loglikelihood(n_s2)
    if abs(old - n) < lthresh:
        break;

    old = n

if str(model.loglikelihood(n_s2))=='nan':
    ans = str(1e9)
else:
    ans = str(model.loglikelihood(n_s2))

print ans
