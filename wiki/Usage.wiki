#summary wuHMM instructions

The example R session below describes the process of loading data files, using wuHMM, and plotting the results.  The data files used in the examples below are available for download from [http://compbio.s3.amazonaws.com/demoData.zip here].  Download and decompress (unzip) the compressed demo data file in the same directory that you placed the wuHMM code files.  This data is also available at GEO under accession [http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE5805 GSE5805].  Download the sample text file that contains the demo sample data descriptions [http://wuhmm.googlecode.com/files/project.txt here].

Launch R.   The following R commands will get you started reading NimbleGen data, and detecting and plotting CNV predictions.  Lines begining with '>' are commands, '#' are comments.

===Loading data===

{{{
# Read sample file containing sample and file names.
> samples<-read.table("project.txt", sep="\t",quote='', header=TRUE, as.is=TRUE)

# Prepare demo data files for analysis.
# The demo data files are from NimbleGen, however other data types should be understandable by the algorithm, provided that the file format is specified correctly.

# You need to specify the column that contains the following data:
# Probe position: iPos = 5
# Chromosome: iChr = 3
# Log2(ratio), intensity, read count: iSignal = 14

# Other parameters:
# Total number of columns in file: cols = 14
# Chromosome names:
#   numeric chrs: autos
#   sex chrs: boolean vector
# Chromosome format.  Double-digit (i.e. Chr01: prepend0=TRUe), or single (Chr1)?  
> system.time(loadSamples(samples,iPos=5,iSignal=14,iChr=3,ncols=14,autos=c(1:19),sex=c(TRUE,FALSE), prepend0=0))
[1] 50.14  3.31 56.50  0.00  0.00

}}}

===Running wuHMM===
{{{
# Decode (or segment) Chr7 on all samples.  wuHMM will output the sample name as it is decoding.
# wuHMM parameters, default parameters listed:
#    sample_labels (required): must be same as samples$sample_name used in loadSamples.
#    chrs: Chromosomes to segment
#    nstay_seed=4:  Number of probes required to 'seed' a region prior to HMM processing.    Increasing this number will reduce the FPR AND sensitivity.
# Other parameters can be found in funs.R.
> system.time(cnvs7<-decodeAndPerm(samples$sample_name,chrs=7, nstay_seed=3))
AJ
Balb_cByJ
C57BL_6J
C58_J
DBA_2J
[1]  48.35  70.01 417.00 163.55 123.97
> dim(cnvs7)
[1] 141   9

# Filter out low-scoring calls
# Parameters: cnvs, score thresholds for (1) losses, and (2) gains
> cnvs7<-filterCalls(cnvs7, 1.5, 1.5)
> dim(cnvs7)
[1] 25  9

# List first 3 CNVs order by str
> cnvs7[order(cnvs7$str),][1:3,]
         str      stp num_probes   mean_sig    score     noise median_sig chr name
112  6413122  8404697         47 -0.5714043 2.456394 0.2677412     -0.638   7 Balb_cByJ
117  9109176  9545727         40 -0.7248250 2.596971 0.2780237     -0.704   7 C58_J
215 11668917 12171962         19 -0.4992105 1.572330 0.3283936     -0.534   7 C58_J
...

# Plot a CNV.
# Parameters (required): sample_name, cnv
# Other parameters, margin size, y-axis boundaries, etc, can be found in plotting.R.
# plotReg will display all cnvs supplied if they are within margin distance of the first CNV.
> plotReg("C58_J", cnvs7[1,])

}}}
http://wuhmm.googlecode.com/files/cnv7_36.gif

===Merge and Genotype CNVRs===
{{{
# Merge CNVs into CNV-regions (CNVRs).  Assign each CNVR an identifier starting with strID.
> cnvrs7<-w_makeCNVRs(cnvs7, strID=1)
# makeCNVRs returns a list of the following elements:
#  (1) CNVRs
#  (2) List of CNV tables.  
> dim(cnvrs7[[1]])
[1] 17  6
# list first 3 CNVRs
> cnvrs7[[1]][1:3,]
  cnvrid chr      str      stp  length ave_score
1      1   7  6413122  8404697 1991576     2.456
2      2   7  9109176  9545727  436552     2.597
3      3   7 11668917 12171962  503046     1.572

# Assign an inferred genotype to each sample based on the optimal partitioning of the data .
> g7<-w_genotype(samples$sample_name, cnvrs7[[2]], cnvrs7[[1]])

# Plot all samples together, highlighting samples with 'abnormal' genotypes.

 

}}}